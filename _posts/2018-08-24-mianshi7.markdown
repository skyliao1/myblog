---
layout: post
title:  "51会议面试"
categories: 技术
tags: 面试
author: skeyliao
description: 51会议面试
---
<div class="parent_div">
<h3>面试题1</h3>
<div class="child_div">
<img src="/assets/images/logo.png"  style="width:50px;" />
加一个固定宽或者高图片会自动等比例缩放如演示
</div>
</div>


<div style="parent_div">
<h3>面试题2</h3>
<div class="child_div">
1.首先服务器端配置允许跨域头通常是  
所有域名
Response.AddHeader("Access-Control-Allow-Origin", "*");
或指定域名下可以访问：

Response.AddHeader("Access-Control-Allow-Origin", "http://www.163.com:80");
2.客户端采用jquery提供的$.ajax()方法就可以了而且不需要考虑兼容因为jquery内部已经将兼容处理好了
</div>
</div>



<div style="parent_div">
<h3>面试题3</h3>
<div class="child_div">
1. 原型链继承

<textarea class="form-control col-sm-12" style="height:400px">
        // 定义a类
        function b (name) {
        // 属性
            this.name = name || 'Animal';
            // 实例方法
            this.sleep = function(){a
                console.log(this.name + '正在睡觉！');
            }
        }
        // 原型方法
        b.prototype.eat = function(food) {
            console.log(this.name + '正在吃：' + food);
        };

        //定义a类
        function a(){ 
        }
        a.prototype = new b();
        a.prototype.name = 'cat';
        var cat = new a();
        console.log(cat.name);
        console.log(cat.eat('fish'));

</textarea>
</div>
<br>
<div>
    2. 寄生组合继承

<textarea class="form-control col-sm-12" style="height:500px">
        // 定义a类
        function b (name) {
        // 属性
            this.name = name || 'Animal';
            // 实例方法
            this.sleep = function(){a
                console.log(this.name + '正在睡觉！');
            }
        }
        // 原型方法
        b.prototype.eat = function(food) {
            console.log(this.name + '正在吃：' + food);
        };

        //定义a类
        function a(name){
            b.call(this);
            this.name = name || 'Tom';
        }
        (function(){
            // 创建一个没有实例方法的类
            var Super = function(){};
            Super.prototype = b.prototype;
            //将实例作为子类的原型
            a.prototype = new Super();
        })();



        var cat = new a();
        console.log(cat.name);
        console.log(cat.eat('fish'));

</textarea>

</div>

</div>


<div style="parent_div" style="margging-top:10px">
<h3 style="margin-top: 64%;">面试题4</h3>
<div class="child_div">
<pre>
1.解决传统js代码引入的缺点 script标签方式(不存在模块系统),容易导致全局冲突,开发者需要手动处理类库之间的依赖
2.能够集成第三方类库，非常适合大型单页面应用
3.现在webapps的需求量日益增大，更少的全页面重载，也就意味着单页面需要加载更多的代码，在用传统方式写js代码无疑是一场灾难
</pre>

具体文献可以参考  <a href="https://segmentfault.com/a/1190000006975491">https://segmentfault.com/a/1190000006975491</a>
</div>
</div>




